from crypt import methods
from flask import Flask, jsonify, request
from flask_cors import CORS, cross_origin
from configparser import ConfigParser
from .model import db, User, Pantry, PantryItem
import os

app = Flask(__name__)
db.init_app(app)
cors = CORS(app)
app.config['CORS_HEADERS'] = 'Content-Type'

# get config file for database user and password
config = ConfigParser()
config.read(os.getenv('BACKEND_CONFIG'))

username = config.get('pantry_db', 'user')
password = config.get('pantry_db', 'password')
userpass = 'mysql+pymysql://' + username + ':' + password + '@'
server  = '127.0.0.1:9999'
dbname   = '/pantry_tracker'

app.config['SQLALCHEMY_DATABASE_URI'] = userpass + server + dbname
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = True


@app.route('/items')
def get_items():
    try:
        pantry = Pantry.query.filter_by(user_id=1).all()
        pantry_dict = []
        for p in pantry:
            # get the name of the pantry item
            name = p.pantry_items.name
            # convert Pantry object to a dictionary
            temp = p.as_dict()
            # add the item name to the dictionary
            temp['name'] = name
            pantry_dict.append(temp)
        
        return jsonify(pantry_dict)

    except Exception as e:
        # see Terminal for description of the error
        print("\nThe error:\n" + str(e) + "\n")
        return

@app.route('/items', methods=['POST'])
def add_item():
    #items.append(request.get_json())
    item = request.get_json()

    try:
        # check if the item to be added is already in the pantry_items table
        pantry_item = PantryItem.query.filter_by(name=item['name']).first()
        if not pantry_item:
            # create new pantry item
            new_pantry_item = PantryItem(item['name'])
            # add it to the pantry_items table
            db.session.add(new_pantry_item)
            db.session.commit()
            # query the table again to get the new item's id, generated by the table
            pantry_item = PantryItem.query.filter_by(name=item['name']).first()

        # add the item to the pantry table
        new_user_item = Pantry(user_id=1, item_id=pantry_item.id, quantity=item['quantity'])
        db.session.add(new_user_item)
        db.session.commit()

    except Exception as e:
        # see Terminal for description of the error
        print("\nThe error:\n" + str(e) + "\n")
        return '', 500

    return '', 204


@app.route('/items/<item_id>', methods=['PUT'])
def edit_item(item_id):
    item = request.get_json()
    try:
        # find the item in the pantry
        pantry_item = Pantry.query.filter_by(user_id=item['user_id']).filter_by(item_id=item['item_id']).first()
        #update to the new quantity
        pantry_item.quantity = item['quantity']
        db.session.commit()   

    except Exception as e:
        # see Terminal for description of the error
        print("\nThe error:\n" + str(e) + "\n")
        return '', 500
    
    return '', 204


@app.route('/items/<item_id>', methods=['DELETE'])
def delete_item(item_id):
    item = request.get_json()
    try:
        # find the item in the pantry
        pantry_item = Pantry.query.filter_by(user_id=item['user_id']).filter_by(item_id=item['item_id']).first()
        db.session.delete(pantry_item)
        db.session.commit()

    except Exception as e:
        # see Terminal for description of the error
        print("\nThe error:\n" + str(e) + "\n")
        return '', 500

    return '', 204